시맨틱 태그 - semantic (의미를 가진)
-> 의미부여를 위한 태그
- 영역 구분을 위해서 사용
- 웹 사이트에서 HTML 소스만 보고도 이 부분이 어디(헤더, 컨텐츠, 푸터 등등)를 나타내는 코드인지 바로 알 수 있도록

기본 영역 구분 태그 
- p(paragraph): 문단 태그
- div(division): 블록 요소
- span: 인라인 요소

<div>: 블록 요소의 기본 태그

<header>
- <head> 랑은 다른 태그
- 헤더는 웹사이트에서 상단이나 좌측에서 나오는 검색창, 로고 부분이나, 메뉴 부분들이 들어가는 영역

<nav>
- navigation의 줄임말
- 대표 메뉴 (gnb, snb, fnb)
  - gnb: global navigation bar (어떤 페이지를 들어가도 항상 상단에 떠있는 메뉴)
  - snb: sub navigation bar (gnb의 서브메뉴)
  - fnb: footer navigation bar (푸터 영역 (아래쪽)에 있는 메뉴)

<main>
- 핵심 컨텐츠를 담고 있는 태그
- 전체 html 코드에서 1번만 사용 가능
- 모든 컨텐츠(헤더, 푸터 제외)의 상위 메뉴

<article>
- 신문 기사, 줄 글, 블로그 글 등등

<section>
- 섹션을 나누는 태그
- 컨텐츠의 세부 영역을 나눌 때 사용

<aside>
- 사이드메뉴를 작성할 때 사용하는 태그

<footer>
- 맨 아래에 있는 태그
- 저작권 내용, 작은 배너, 바로가기 링크 등등

Lorem Ipsum -> lipsum.com
다람쥐 헌 쳇바퀴에 타고파

HTML
-> HyperText Markup Language
CSS
-> Cascading Style Sheet

CSS를 적용하는 방법
속성이름: 값;

- 내부 스타일 시트
HTML 코드 내부에 스타일 코드를 작성하는 방식
<head> 태그 내부에 <style> 태그를 생성해서 그 내부에 CSS 코드를 작성
-> 간단하게 테스트용도로 작업을 할 때
-> 코드가 짧을 때

- 외부 스타일 시트
HTML 파일이 아니라 별도의 css 파일을 만들어서 HTML 에 링크시키는 방식
<head> 태그 내부에 <link> 태그를 생성해서 외부에서 작성한 css 파일과 서로 연결시켜주어야 함
<link rel="stylesheet" href="css 파일 경로">
-> 실제 프로젝트를 할 떄
-> 코드가 길어질 때
-> 이 css 파일을 적용해야 할 HTML 코드가 많을 때

- 태그 내부 스타일
태그에 style="~~~"
태그 내부 스타일에서는 엔터를 못치기 때문에 세미콜론(;)을 이용해서 구분


브라우저 스타일
- 따로 css로 설정해주지 않았는데 브라우저(크롬, 엣지, 사파리 등등)이 기본적으로 적용시키는 스탕리
-> margin: 8px이 기본적으로 들어가있음

선택자
- 웹 문서에서 어느 부분에 해당하는 스타일을 부여할 지 결정해주는 구문

* -> 전체 선택자 (universal selector)
- 전체에 스타일 부여

타입 선택자 (type selector)
- 특정 태그에 스타일 부여


클래스/아이디 선택자 (class, id selector)

클래스 -> 그룹 이름 (여러 개 사용 가능)
아이디 -> 고유 이름 (1번만 사용 가능)

클래스에 스타일을 부여할 때는 
"."+클래스 이름

아이디에 스타일을 부여할 때는
"#"+클래스 이름

한 요소는 클래스를 여러 개 가질 수 있다
id와 클래스도 같이 가질 수 있다


그룹 선택자 -> 여러 선택자에 동일한 스타일을 부여할 때
[선택자], [선택자] { 스타일 }


스타일 우선순위
-> 스타일이 중복되서 들어가서 충돌이 날 경우 어떤 스타일이 더 우선되는가?

우선순위 높음 <--------------------------> 낮음
스타일 시트의 !important > 태그 내부 스타일 > 아이디 스타일 > 클래스 스타일(아래 > 위) > 타입 스타일(아래 > 위)